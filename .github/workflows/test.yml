name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        
    - name: Run black format check
      run: black --check project_tools tests
      
    - name: Run flake8 linting
      run: flake8 project_tools tests
      
    - name: Run mypy type checking
      run: mypy project_tools --ignore-missing-imports

  packaging-tests:
    name: Packaging Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest requests
        
    - name: Test editable installation
      run: |
        pip install -e .
        python -c "import project_tools; print(f'Version: {project_tools.__version__}')"
        pip uninstall -y project-tools
        
    - name: Test wheel build and install
      run: |
        python -m build --wheel
        pip install dist/*.whl
        python -c "import project_tools; print('Wheel install successful')"
        pip uninstall -y project-tools
        
    - name: Run packaging tests
      run: |
        pip install pytest
        pytest tests/test_packaging.py -v

  cli-integration:
    name: CLI Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.11"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install package and test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest requests
        
    - name: Run CLI integration tests
      run: pytest tests/test_cli_integration.py -v
      
    - name: Test console script commands
      run: |
        project-tools --help
        project-tools status --format json || true
        project-tools todo list || true

  api-integration:
    name: API Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.11"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install package and test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest requests
        
    - name: Run API integration tests
      run: pytest tests/test_api_integration.py -v

  web-gui-tests:
    name: Web GUI Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install package and test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest requests
        
    - name: Run web GUI smoke tests
      run: pytest tests/test_web_gui.py -v
      
    - name: Test web console script
      run: |
        project-tools-web --help || true

  cleanup-validation:
    name: Cleanup Validation Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.11"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests
        
    - name: Run cleanup validation tests
      run: pytest tests/test_cleanup.py -v

  full-workflow-test:
    name: Full Installation Workflow
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Test complete install → use → uninstall cycle
      run: |
        python -m pip install --upgrade pip
        
        # Install package
        pip install -e .
        
        # Test imports work
        python -c "from project_tools import ProjectManager; print('Import successful')"
        
        # Test CLI works
        project-tools --help
        project-tools status --format json || echo "Status command ran (exit code ignored)"
        
        # Test that all submodules can be imported
        python -c "import project_tools.formatters; print('Formatters OK')"
        python -c "import project_tools.intelligence; print('Intelligence OK')"
        python -c "import project_tools.web_gui; print('Web GUI OK')"
        
        # Uninstall and verify cleanup
        pip uninstall -y project-tools
        
        # Verify import fails after uninstall
        python -c "import project_tools" && exit 1 || echo "Import correctly fails after uninstall"

  comprehensive-test:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [lint, packaging-tests, cli-integration, api-integration, web-gui-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install package and all test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov requests build black flake8 mypy
        
    - name: Run complete test suite
      run: |
        pytest tests/ -v --cov=project_tools --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-matrix-summary:
    name: Test Matrix Summary
    runs-on: ubuntu-latest
    needs: [lint, packaging-tests, cli-integration, api-integration, web-gui-tests, cleanup-validation, full-workflow-test]
    if: always()
    steps:
    - name: Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Packaging: ${{ needs.packaging-tests.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- CLI Integration: ${{ needs.cli-integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- API Integration: ${{ needs.api-integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Web GUI: ${{ needs.web-gui-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Cleanup: ${{ needs.cleanup-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Full Workflow: ${{ needs.full-workflow-test.result }}" >> $GITHUB_STEP_SUMMARY